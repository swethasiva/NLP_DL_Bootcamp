# -*- coding: utf-8 -*-
"""Day1_Sklearn_Linear Regression-Salary Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R15_hX3HHxdn6e29JwvE12bGw_u2t5wW

**Salary Prediction using Linear Regression**
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv("Salary_Data.csv") # Converts into a data frame
data.head()

x = data.iloc[:]['YearsExperience'].values  # .values coverts it into an array
x

y = data.iloc[:]['Salary'].values
y

# For using linear regression library function we need to make the arrays into 2-D array
x.reshape(len(x),1)

y = y.reshape(len(y), 1)
y

# Divide the data into training and testing samples
from sklearn.model_selection import train_test_split 
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.20)

xtrain.ndim
xtrain.shape

xtest.shape

ytrain.shape

ytest.shape

#### Building the model
from sklearn.linear_model import LinearRegression 
model = LinearRegression()

xtrain = xtrain.reshape(len(xtrain), 1)
#ytrain.reshape(len(ytrain), 1)
#model.fit(xtrain,ytrain)

xtrain.shape

##### training the Linear Regression model
model.fit(xtrain,ytrain)

print(xtest.shape)
xtest = xtest.reshape(len(xtest), 1)
print(xtest.shape)

xtest.shape

#### Predicting the value
ypred = model.predict(xtest)
ypred

ytest

#### Calculating R2 score
### r2_score, also called the regression score function is used to test the performance of the model. A r2 score of 1 is the best case.
from sklearn.metrics import r2_score
r2 = r2_score(ytest, ypred)
r2

##### Drawing the Line of Regression (Training Samples)
plt.scatter(xtrain, ytrain, color='purple', label="Actual points")
plt.plot(xtrain, model.predict(xtrain), label="Line of regression")
plt.legend(loc=2) ## Specifies the quadrant of the legend to be present
plt.show()

##### Drawing the line of regression (Testing Sample)
##### Drawing the Line of Regression (Training Samples)
plt.scatter(xtest, ytest, color='purple')
plt.plot(xtest, ypred)
plt.show()

#### Printing m and c values of the equation
## We know that any linear regression is going to be of the form y = mx + c
m = model.coef_
c = model.intercept_
print(m,c)

#### Predicting for a new value
model.predict([[10.5]])

###### Saving the trained models
## Saving a model in pickle allows for reloading the model and thus skips the re-training part and the related computational expenses.
from sklearn.externals import joblib
joblib.dump(model, "Salry_Prediction_LR.pkl")

###### Loading the model from stored model file
mymodel = joblib.load('Salry_Prediction_LR.pkl')

mymodel.predict([[10.2]])

