# -*- coding: utf-8 -*-
"""Day1_Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h3SivBOoyT-SHmV-r3WQZAUBrV8Ozq2T

**Pandas** 

An open source Python Library for data analysis and manipulation, especially data of the form tables and time series. 

It is much more powerful than excel and simpler too.
"""

import pandas as pd

df = pd.read_csv('pokemon_data.csv')
df.head() ## Prints first five rows of the dataframe
df.tail() ## Prints last 5 rows of the dataframe

### Reading a txt file, xlsx or any other delimiter files

df1 = pd.read_excel('pokemon_data.xlsx') ## Reading an excel file
df1.head()

df1 = pd.read_csv('pokemon_data.txt', delimiter='\t') ## Reading a tab seperated value of tsv file. Delimiter can be user-defined.
df1.head()

## Printing the column headers
print(df.columns)

## Printing Rows of data frame:
print(df.head())
print(df.iloc[:2])
print(df.iloc[:2, 2:5])


## Note: iloc can be used only for number based indexing. for better indexing based on conditions nad values use loc

print(df['Name'])
print(df[['Name', 'Type 1', 'Type 2']])

df.loc[df['Type 1'] == 'Grass']

"""**Describe the data using mean, median etc**"""

df.describe()

"""**Sorting Dataframe**"""

df.sort_values('Name') # sorted in alphabetical order. NOTE: It is not an inplace operation

df

df.sort_values(['Name', 'HP'], ascending = False)

df.sort_values(['Name', 'HP'], ascending=[False, True])

df['Total'] = df.iloc[:, 4:10].sum(axis=1)
###df.drop(columns = ['Total']) ## To remove a column 
cols = list(df.columns)
df['Total'] = df.iloc[:, 4:12].sum(axis=1) ##axis =1 means that we sum it up along the colums---ie. horizontally
df = df[cols[0:4] + [cols[-1]]+cols[4:12]]

df.head(5)

df.to_csv('modified.csv', index=False) # Saving as CSV

df.to_excel('modified.xlsx', index=False) # Saving as Excel sheet

df.to_csv('modified.txt', index=False, sep='\t') # Saving as TSV

# NOTE: index = 0, eliminates the index being writen into the output file

"""**Filtering Data**"""

new_df = df.loc[(df['Type 1'] == 'Grass') & (df['Type 2'] == 'Poison') & (df['HP'] > 50)]
print(new_df)

new_df.reset_index(drop=True, inplace=True)
new_df
## The reset_index generates a new index for all the data elements and drop =true deletes the old index column and inplace = true ensures that the change is written back into the new_df

df.loc[df['Name'].str.contains('Mega')] ## Inside the contains function you can even pass a regex

"""**Regex based filtering**"""

import re

df.loc[df['Type 1'].str.contains('fire|grass', flags=re.I, regex=True)]

